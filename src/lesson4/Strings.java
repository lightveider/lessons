package lesson4;

import org.w3c.dom.ls.LSOutput;

import java.lang.reflect.Array;
import java.util.Arrays;

public class Strings {
    public static void main(String[] args) {
        //char  16 bit -  —Ö—Ä–∞–Ω–∏—Ç –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª unicode
        // –æ—Ç 0 –¥–æ 65536 –ª–∏–±–æ escape  –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å  –æ—Ç '\u0000' –¥–æ  '\uffff'

        char char1 = 'J'; // –∑–∞–¥–∞–µ—Ç—Å—è –≤ –æ–¥–∏–Ω–∞—Ä–Ω—ã—Ö –∫–æ–≤—ã—á–∫–∞—Ö
        char char2 = 74; // –∫–∞–∫ –Ω–æ–º–µ—Ä —Å–∏–º–≤–æ–ª–∞, —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        char char3 = '\u0044'; // 16-—Ä–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ escape –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        System.out.println(char1); //J
        System.out.println(char2); // J
        System.out.println(char3); // D

        //java.lang.String
        //—Å—Ç—Ä–æ–∫–∏ –∑–∞–¥–∞—é—Ç—Å—è –ª–∏–±–æ –≤ –¥–≤–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö : "—Å—Ç—Ä–æ–∫–∞",
        // –ª–∏–±–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–¥–Ω–æ–≥–æ –∏–∑ –∫–æ–Ω—Ç—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤
        // u –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ new: new String()  !! –¥–∞–Ω–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ–º —á–µ—Ä–µ–∑ "" –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ

        //—Å–æ–∑–¥–Ω–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ char
        char[] jjdchars = {'\u004a', '\u004a', '\u0044' };
        String jjdString = new String(jjdchars);
        System.out.println(jjdString); //JJD
        jjdString = "\\u004a', '\\u004a', '\\u0044";
        jjdString = "JJD";

        // —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
        System.out.println(jjdString.length()); //3
        System.out.println(jjdString.codePoints().count());//3


        char[] frogChars = {'\uD83D', '\uDC38' }; //üê∏
        String frogString = new String(frogChars);
        System.out.println(frogString);
        System.out.println(frogString.length());// üê∏ - –¥–ª–∏–Ω–Ω–∞ 2
        System.out.println(frogString.codePoints().count());//1


        //–ü—É–ª —Å—Ç—Ä–æ–∫
        String course1 = "Java";
        String course2 = "Java";
        String course3 = new String("Java");
        //—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫
        System.out.println(course1 == course2); //true
        System.out.println(course1 == course3); //false
        // —Å—Ç—Ä–æ–∫–∏ –≤ —è–∑—ã–∫–µ –Ω–µ –∏–∑–º–µ–Ω–Ω—ã –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π


        // —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
        course1 = "Java junior developer";
        course2 = "Java junior DEVELOPER";


        System.out.println(course1.equals(course2)); // equals –≤–æ–≤–∑—Ä–∞—â–∞–µ—Ç true/ false —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É
        System.out.println(course1.equalsIgnoreCase(course2)); // —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞, —Å—Ä–∞–≤–Ω–∏–≤–∞—é—Ç—Å—è –¥–ª–∏–Ω—ã –∏ –ø–æ—Ç–æ–º —É–∂–µ –∑–Ω–∞—á–µ–Ω–∏—è
        System.out.println(course1.compareTo(course2)); // 32 = 101(–Ω–æ–º–µ—Ä —Å–∏–º–≤–æ–ª–∞ –µ –º–∞–ª–µ–Ω—å–∫–æ–µ) - 69 ( –Ω–æ–º–µ—Ä —Å–∏–º–≤–æ–ª–∞ –ï –±–æ–ª—å—à–æ–µ)
        System.out.println(course1.compareToIgnoreCase(course2)); // 0

        String userData = null;
        String exit = "exit";
        // userData = "exit";
        //–æ—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è java.lang.NullPointerException
        //System.out.println(userData.equals("exit"));  // –æ—à–∏–±–∫–∞
        System.out.println(exit.equals(userData)); // —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ç–∞–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫


        // –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤–æ –≤—Ä–µ–º—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
        String name1 = "—Å—Ç—Ä–æ–∫–∏ –≤ Java";
        String name2 = "—Å—Ç—Ä–æ–∫–∏" + " " + "–≤" + " " + "Java"; // –ø–æ–ª—É—á–∏–ª–∏ —Å—Ç—Ä–æ–∫—É "—Å—Ç—Ä–æ–∫–∏ –≤ Java"  —Ç–æ –∂–µ —Å–∞–º–æ–µ —á—Ç–æ –∏ —Å—Ç—Ä–æ–∫–∞ –≤—ã—à–µ
        System.out.println(name1 == name2);// true

        //–≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤ –º–æ–º–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        name1 = "—Å—Ç—Ä–æ–∫–∏";
        name2 = " –≤ Java";
        System.out.println(name1 + name2 == name1 + name2); // —Å—Ç—Ä–æ–∫–∏ –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        //—Å–æ–∑–¥–∞—é—Å—Ç—è –¥–≤–∞ —Ä–∞–∑–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞

        String start = "start";
        for (int i = 0; i < 4; i++) { // —Ç–∞–∫ –Ω–µ–ª—å–∑—è
            start += " " + i;
        }
        System.out.println(start);

        //StringBuilder  —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ, –¥–ª—è –æ–¥–Ω–æ–ø–æ—Ç–æ—á–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º
        //StringBuffer   –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–≤–æ–∞—Ç—å –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –æ–±—Ä–∞—â–∞—é—Ç—Å—è –∫ –æ–¥–Ω–æ–º—É –∏ —Ç–æ–º—É –∂–µ StringBuilder  –¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º


        StringBuilder sb = new StringBuilder("Start");
        sb.append(name1).append(name2);
        String res = sb.toString(); // —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Ç–∏–ø–∞ java.lang.String
        System.out.println(res);

        sb = new StringBuilder("Start");
        for (int i = 0; i < 4; i++) {
            sb.append(" ").append(i);

        }
        res = sb.toString();
        System.out.println(start);

        String[] animals = {"–∫–æ—Ç", "–ø–µ—Å", "–º—ã—à—å"};
        // —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, —Ä–∞–∑–º–µ—Ä –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –≤ –¥–≤–∞ —Ä–∞–∑–∞ –±–æ—å—à–µ —á–µ–º —É animals –≤ —Ü–∏–∫–ª–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –º–∞—Å—Å–∏–≤ —Ä–∞–Ω–¥–æ–º–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞ animals
        String[] doubleAnimals = new String[animals.length * 2];

        for (int i = 0; i < doubleAnimals.length; i++) {
            doubleAnimals[i] = animals[(int) (Math.random() * animals.length)];
        }
        System.out.println(Arrays.toString(doubleAnimals));

        // –º–µ—Ç–æ–¥—ã –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã: –Ω–∞—á–∞–ª–æ, –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏
        // trim –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
        // trim() —É–±–∏—Ä–∞–µ—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –º–µ–Ω—å—à–µ–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ u0020 —Ç–æ–ª—å–∫–æ –ø–æ –∫—Ä–æ—è–º —Å—Ç—Ä–æ–∫–∏

        String someStr = " —Å—Ç—Ä–æ–∫–∞ ";
        someStr = someStr.trim();


        //Java11: —É–±–∏—Ä–∞–µ—Ç –ª—é–±–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
        //strip() - —Å –¥–≤—É—Ö —Å—Ç–æ—Ä–æ–Ω —É–±–∏—Ä–∞—é—Ç –ø—Ä–æ–±–µ–ª—ã –ª—é–±–æ–π –¥–ª–∏–Ω—ã
        //stripLeading() - —Å –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏
        //stripTrailing() - —Å –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫–∏

        //–ü–æ–ª—É—á–∏—Ç—å –º–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏
        char[] formStr = someStr.toCharArray();
        System.out.println(Arrays.toString(formStr));

        String names = "Java, Kotlin, Python";
        String[] namesArr = names.split(", "); // —Ä–∞–∑–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É  –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é –≤ —Å–∫–æ–±–∫–∞—Ö
        System.out.println(Arrays.toString(namesArr));

        names = String.join("!", namesArr); // –ø–µ—Ä–µ–¥–∞—ë–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∏ –º–∞—Å—Å–∏–≤
        // names = String.join("! ", "—Å—Ç—Ä–æ–∫–∞", "—Å—Ç—Ä–æ–∫–∞")
        System.out.println(names);
        

    }
}

